// src/services/fcmService.ts

import { getToken, onMessage, type Messaging } from 'firebase/messaging';
import { getMessagingInstance } from '../config/firebase';
import { firestoreService } from './firestoreService';

const VAPID_KEY = import.meta.env.VITE_FIREBASE_VAPID_KEY;

class FCMService {
  private currentToken: string | null = null;

  /**
   * Po≈æ√°d√° u≈æivatele o povolen√≠ notifikac√≠ a z√≠sk√° FCM token
   */
  async requestPermissionAndGetToken(userId: string): Promise<string | null> {
    try {
      let messaging = getMessagingInstance();
      let attempts = 0;
      while (!messaging && attempts < 30) {
        await new Promise((resolve) => setTimeout(resolve, 100));
        attempts++;
        messaging = getMessagingInstance(); // ‚Üê Zkus znovu
      }

      if (!messaging) {
        console.warn('‚ö†Ô∏è Firebase Messaging nen√≠ k dispozici');
        return null;
      }

      // Zkontroluj, jestli je messaging inicializov√°no
      if (!messaging) {
        console.warn('‚ö†Ô∏è Firebase Messaging nen√≠ k dispozici');
        return null;
      }

      // Po≈æ√°dej o povolen√≠
      const permission = await Notification.requestPermission();

      if (permission !== 'granted') {
        console.log('‚ÑπÔ∏è U≈æivatel nepovolil notifikace');
        return null;
      }

      console.log('‚úÖ Povolen√≠ pro notifikace udƒõleno');

      // Zaregistruj service worker
      let registration: ServiceWorkerRegistration;

      try {
        registration = await navigator.serviceWorker.register(
          '/firebase-messaging-sw.js',
          {
            scope: '/',
            type: 'classic',
          }
        );

        await navigator.serviceWorker.ready;
        console.log('‚úÖ Service Worker zaregistrov√°n:', registration.scope);
      } catch (swError) {
        console.error('‚ùå Chyba p≈ôi registraci Service Workeru:', swError);
        return null;
      }

      // Z√≠skej FCM token
      try {
        const token = await getToken(messaging as Messaging, {
          vapidKey: VAPID_KEY,
          serviceWorkerRegistration: registration,
        });

        if (token) {
          console.log('‚úÖ FCM Token z√≠sk√°n:', token.substring(0, 30) + '...');
          this.currentToken = token;

          // Ulo≈æ token do Firestore
          await firestoreService.saveFCMToken(userId, token);

          return token;
        } else {
          console.warn('‚ö†Ô∏è Nepoda≈ôilo se z√≠skat FCM token');
          return null;
        }
      } catch (tokenError) {
        console.error('‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ FCM tokenu:', tokenError);
        return null;
      }
    } catch (error) {
      console.error(
        '‚ùå Neoƒçek√°van√° chyba v requestPermissionAndGetToken:',
        error
      );
      return null;
    }
  }

  /**
   * Naslouch√° zpr√°v√°m, kdy≈æ je aplikace v pop≈ôed√≠
   */
  async listenForMessages(callback: (payload: any) => void): Promise<void> {
    const messaging = getMessagingInstance();

    if (!messaging) {
      console.warn('‚ö†Ô∏è Firebase Messaging nen√≠ k dispozici pro listening');
      return;
    }

    onMessage(messaging, (payload) => {
      console.log('üì® Zpr√°va p≈ôijata v pop≈ôed√≠:', payload);
      callback(payload);

      // Zobraz notifikaci i kdy≈æ je app otev≈ôen√°
      if (payload.notification && Notification.permission === 'granted') {
        new Notification(payload.notification.title || 'Nov√° zpr√°va', {
          body: payload.notification.body,
          icon: '/icon-192x192.png',
          tag: payload.data?.messageId || 'family-message',
          requireInteraction: payload.data?.urgent === 'true',
        });
      }
    });
  }

  /**
   * Vr√°t√≠ aktu√°ln√≠ token (pokud existuje)
   */
  getCurrentToken(): string | null {
    return this.currentToken;
  }
}

export const fcmService = new FCMService();
