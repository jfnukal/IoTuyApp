import * as functions from 'firebase-functions';
import * as admin from 'firebase-admin';
import { bakalariAPI } from '../../src/api/bakalariAPI';

// Inicializace Firebase Admin SDK
admin.initializeApp();
const db = admin.firestore();

// ================================================================= //
// FUNKCE 1: Aktualizace rozvrhu (z≈Øst√°v√° beze zmƒõny)
// ================================================================= //
export const updateBakalariTimetable = functions
  .region('europe-west1')
  .pubsub.schedule('0 17 * * 1-5')
  .timeZone('Europe/Prague')
  .onRun(async () => {
    console.log('Spou≈°t√≠m automatickou aktualizaci rozvrhu z Bakal√°≈ô≈Ø.');
    try {
      const freshTimetable = await bakalariAPI.getTimetable();
      if (!freshTimetable || freshTimetable.length === 0) {
        console.warn('Nepoda≈ôilo se naƒç√≠st nov√Ω rozvrh, ≈æ√°dn√° data k z√°pisu.');
        return null;
      }
      const scheduleRef = db.collection('schedules').doc('johanka');
      await scheduleRef.set({
        days: freshTimetable,
        lastUpdated: admin.firestore.FieldValue.serverTimestamp(),
      });
      console.log(
        '‚úÖ Rozvrh pro Johanku byl √∫spƒõ≈°nƒõ aktualizov√°n v Firestore.'
      );
      return null;
    } catch (error) {
      console.error('‚ùå Do≈°lo k chybƒõ p≈ôi aktualizaci rozvrhu:', error);
      return null;
    }
  });

// ================================================================= //
// FUNKCE 2: Odesl√°n√≠ Push notifikace p≈ôi nov√© zpr√°vƒõ (na≈°e nov√° funkce)
// ================================================================= //
// NAHRAƒé CELOU TUTO FUNKCI
export const sendPushOnNewMessage = functions
  .region('europe-west1')
  .firestore.document('familyMessages/{messageId}')
  .onCreate(async (snapshot, context) => {
    const messageData = snapshot.data();
    if (!messageData) {
      console.log('Nov√° zpr√°va nem√° ≈æ√°dn√° data.');
      return;
    }
    const recipients = messageData.recipients.filter(
      (id: string) => id !== messageData.senderId
    );
    if (recipients.length === 0) {
      console.log('≈Ω√°dn√≠ p≈ô√≠jemci k odesl√°n√≠ notifikace.');
      return;
    }
    const userSettingsPromises = recipients.map((userId: string) =>
      db.collection('userSettings').doc(userId).get()
    );
    const userSettingsResults = await Promise.all(userSettingsPromises);
    const allTokens = userSettingsResults
      .flatMap((doc) => (doc.exists ? doc.data()?.fcmTokens : []))
      .filter((token) => token);

    if (allTokens.length === 0) {
      console.log('Nenalezeny ≈æ√°dn√© FCM tokeny pro p≈ô√≠jemce.');
      return;
    }

    console.log(`Zpracov√°v√°m zpr√°vu s ID: ${context.params.messageId}`);
    console.log(`Nalezeno ${allTokens.length} token≈Ø pro odesl√°n√≠.`);

    const message = {
      notification: {
        title: `üí¨ Nov√° zpr√°va od ${messageData.senderName}`,
        body: messageData.message,
      },
      tokens: allTokens,
    };

    try {
      const response = await admin.messaging().sendMulticast(message);
      console.log('‚úÖ Notifikace √∫spƒõ≈°nƒõ odesl√°ny:', response.successCount);
      if (response.failureCount > 0) {
        console.warn(
          'Nƒõkter√© notifikace se nepoda≈ôilo odeslat:',
          response.failureCount
        );
      }
    } catch (error) {
      console.error('‚ùå Chyba p≈ôi odes√≠l√°n√≠ notifikac√≠:', error);
    }
  });
